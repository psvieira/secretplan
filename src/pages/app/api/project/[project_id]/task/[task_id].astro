
---
export const partial = true

import { 
  deleteTask, 
  updateTask,
  getTask,
  addActivity, 
} from '@data/pocketbase'

import TasksList from '@components/app/tasks/TasksList.astro'

const { task_id = '', project_id = '' } = Astro.params

const task = await getTask(task_id)

if (Astro.request.method === 'DELETE') {
  try {
    await deleteTask(task_id)
  } catch (e) {
    return new Response('An error ocurred', { status: 400,
    })
  }

await addActivity({
    team: task?.expand?.project?.team as string,
    project: project_id,
    text: `Task "${task.text}" deleted`,
    type: 'task_delete',
  })

  return new Response(null, { status: 200 })
}

if (Astro.request.method === 'PUT') {
  const formData = await Astro.request.formData()
  const action = formData.get('action') as string

  try {
    switch (action) {
      case 'check':
        await updateTask(task_id, {
          completed: true,
          completed_on: new Date().toISOString(),
        })
        await addActivity({
          team: task?.expand?.project?.team as string,
          project: project_id,
          text: `Task "${task.text}" marked as completed`,
          type: 'task_complete',
        })
        break
      case 'uncheck':
        await updateTask(task_id, {
          completed: false,
          completed_on: '',
        })
        await addActivity({
          team: task?.expand?.project?.team as string,
          project: project_id,
          text: `Task "${task.text}" marked as not completed`,
          type: 'task_incomplete',
        })
        break
      case 'star':
        await updateTask(task_id, {
          starred: true,
          starred_on: new Date().toISOString(),
        })
        await addActivity({
          team: task?.expand?.project?.team as string,
          project: project_id,
          text: `Task "${task.text}" marked as starred`,
          type: 'task_star',
        })
        break
      case 'unstar':
        await updateTask(task_id, {
          starred: false,
          starred_on: '',
        })
        await addActivity({
          team: task?.expand?.project?.team as string,
          project: project_id,
          text: `Task "${task.text}" marked as not starred`,
          type: 'task_unstar',
        })
        break
      case 'edit-text':
        await updateTask(task_id, {
          text: formData.get('task-text') as string,
        })
        await addActivity({
          team: task?.expand?.project?.team as string,
          project: project_id,
          text: `Task "${task.text}" text edited`,
          type: 'task_edit_text',
        })
        break
      case 'upload':
        try {
          await updateTask(task_id, {
            images: formData.getAll('images') as string[],
          })
        } catch (e) {
          return new Response('Cannot upload image', {
            status: 400,
          })
        }
        await addActivity({
          team: task?.expand?.project?.team as string,
          project: project_id,
          text: `Task "${task.text}" image added`,
          type: 'task_add_image',
        })
        break
      case 'delete-image':
        await updateTask(task_id, {
          //@ts-expect-error
          'images-':
            formData.get('image') as string,
        })
        await addActivity({
          team: task?.expand?.project?.team as string,
          project: project_id,
          text: `Task "${task.text}" image deleted`,
          type: 'task_delete_image',
        })
        break
      default:
        return new Response('Invalid action', {
          status: 400,
        })
    }
  } catch (e) {
    return new Response('An error occurred', {
      status: 400,
    })
  }
}
---

<div id='tasks-todo' hx-swap-oob='true'>
	<TasksList done={false} project_id={project_id} />
</div>

<div id='tasks-done' hx-swap-oob='true'>
  <TasksList done={true} project_id={project_id} />
</div>

<div id='starred-tasks-list' hx-swap-oob='true'>
  <TasksList starred={true} />
  <TasksList starred={true} team_id={task?.expand?.project?.team} />
</div>


